package abc.oracle.apps.fnd.server;

import abc.oracle.apps.fnd.poplist.server.InventoryOrgPopVOImpl;

import java.io.IOException;
import java.io.OutputStream;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;

import oracle.jbo.RowSetIterator;
import oracle.jbo.XMLInterface;

import oracle.jbo.domain.BlobDomain;

import oracle.xml.parser.v2.XMLNode;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TrainingAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public TrainingAMImpl() {
    }
    
    public void initLEVO(String leIDStr){
        InvokeGetLEFunVOImpl vo = getInvokeGetLEFunVO1();
        vo.clearCache();
        vo.setWhereClause(null);
        vo.setWhereClauseParam(0, leIDStr);
        vo.executeQuery();
    }
    
    public String invokeLEPLSQLFun(String leIDStr){
        System.out.println("Invoke PLSQL Fun");    
        String leNameStr = "";
        String stmt = "BEGIN :1 := XXABC_PLSQL_UTILS.GET_LE_NAME(:2); END;";
        CallableStatement cs = getOADBTransaction().createCallableStatement(stmt, 1);
        
        try  {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setInt(2, Integer.parseInt(leIDStr));
            cs.execute();
            leNameStr = cs.getString(1);
            cs.close();
        } catch (Exception ex)  {
            ex.printStackTrace();
        } 
        finally  {
        }
        
        return leNameStr;
    }
    
    public String invokeLEPLSQLPRO(String leIDStr){
        String leNameStr = "";
        String stmt = "BEGIN " +
                      "XXABC_PLSQL_UTILS.GET_LE_NAME_PROC" +
                      "(P_LEGAL_ENTITY_ID => :1" +
                      ",P_LEGAL_ENTITY_NAME => :2" +
                      "); " +
                      "END;";
        CallableStatement cs = getOADBTransaction().createCallableStatement(stmt, 1);
        
        try  {
            cs.setInt(1, Integer.parseInt(leIDStr));
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.execute();
            leNameStr = cs.getString(2);
            cs.close();
        } catch (Exception ex)  {
            ex.printStackTrace();
        } finally  {
        }
        
        return leNameStr;
        
    }
    
    public void initValueSetVO(){
        ValueSetVOImpl vo = getValueSetVO1();
        vo.executeQuery();
    }
    
    public void initPOTypesLookupVO(){
        POTypesLookupVOImpl vo = getPOTypesLookupVO1();
        vo.executeQuery();
    }    
    
    public void initUserEmployeeVO(){
        UserEmployeeDetailsVOImpl vo = getUserEmployeeDetailsVO1();
        vo.executeQuery();
    }
    
    public void initGraphQuery(){
        PositionGraphVOImpl vo = getPositionGraphVO1();
        
        if (vo == null){
            MessageToken[] tokens = {new MessageToken("OBJECT_NAME", "PositionGraphVO1")};
            throw new OAException("AK", "FWK_TBX_OBJECT_NOT_FOUND", tokens);
        }
        
        if (!vo.isPreparedForExecution()) {
            vo.executeQuery();
        }
        
    }
    
    public void initEmpVO(){
        XxabcEmpEOVOImpl vo = getXxabcEmpEOVO1();
        vo.clearCache();
        vo.executeQuery();
    }
    
    public void empSave(){
        getOADBTransaction().commit();
        throw new OAException("Data saved successfully", OAException.INFORMATION);
    }
    
    public void iterateEmpVO(){
        XxabcEmpEOVOImpl vo = getXxabcEmpEOVO1();
        XxabcEmpEOVORowImpl row = null;
        RowSetIterator rowIter = vo.createRowSetIterator("EmpIter");
        
        System.out.println("****Emp Data****");
        
        while(rowIter.hasNext()){
            row = (XxabcEmpEOVORowImpl)rowIter.next();
            System.out.println("Emp Name="+row.getEname()+", Select Flag="+row.getselectFlag());
        }
        
        rowIter.closeRowSetIterator();
    }
    
    public void deleteEmpRows(){
        XxabcEmpEOVOImpl vo = getXxabcEmpEOVO1();
        XxabcEmpEOVORowImpl row = null;
        RowSetIterator rowIter = vo.createRowSetIterator("EmpIter");
        
        System.out.println("****Emp Data****");
        String empNos = "";
        
        
        while(rowIter.hasNext()){
            row = (XxabcEmpEOVORowImpl)rowIter.next();
            System.out.println("Emp Name="+row.getEmpno()+", Select Flag="+row.getselectFlag());
            
            if(row.getselectFlag() != null && "Y".equals(row.getselectFlag())){
                empNos += row.getEmpno()+",";
                row.remove();
            }
            
        }
        
        rowIter.closeRowSetIterator();
        getOADBTransaction().commit();
        throw new OAException ("Emp Nos deleted="+empNos, OAException.INFORMATION);
    }    
    
    public void deleteEmpRowsNew(){
        XxabcEmpEOVOImpl vo = getXxabcEmpEOVO1();
        XxabcEmpEOVORowImpl row = null;
        oracle.jbo.Row[] rows = vo.getFilteredRows("selectFlag", "Y");
        int rowLength = rows.length;
        String empNos = "";
        
        if(rowLength > 0){
            for(int i=0;i<rows.length;i++){
                row = (XxabcEmpEOVORowImpl)rows[i];
                empNos += row.getEmpno()+",";                
                row.remove();
            }
        }
        else{
            throw new OAException("No rows selected for deletion", OAException.INFORMATION);
        }
        
        getOADBTransaction().commit();
        throw new OAException ("Emp Nos deleted="+empNos, OAException.INFORMATION);
    }     
    
    public void insertEmpRow(){
        XxabcEmpEOVOImpl vo = getXxabcEmpEOVO1();
        XxabcEmpEOVORowImpl row = null;
        
        row = (XxabcEmpEOVORowImpl)vo.createRow();
        row.setNewRowState(row.STATUS_INITIALIZED);
        
        oracle.jbo.domain.Number empSeq = getOADBTransaction().getSequenceValue("XXABC_EMPNO");
        row.setEmpno(empSeq);
        
        vo.first();
        vo.insertRow(row);
        
    }
    
    // Delete Dept EOVORow
    public void deleteDeptRows(){
        XxabcDeptEOVOImpl vo = getXxabcDeptEOVO1();
        XxabcDeptEOVORowImpl row = null;
        
        RowSetIterator rowIter = vo.createRowSetIterator("DeptRowIter");
        String deptNoList = "";
        
        while(rowIter.hasNext()){
            row = (XxabcDeptEOVORowImpl)rowIter.next();
            String selectFlagStr = row.getselectFlag();
            String deptNoStr = row.getDeptno().stringValue();
            
            System.out.println("DEPTNO="+deptNoStr+" "+
                               "selectFlagStr="+selectFlagStr);
            
            if (selectFlagStr != null && "Y".equals(selectFlagStr)){
                deptNoList += deptNoStr+",";
                
                row.remove();
            }
                               
        }
        
        rowIter.closeRowSetIterator();
        
        throw new OAException("Deleted Rows="+deptNoList, OAException.INFORMATION);
    }
    
    public void insertDeptEOVORow(){
        XxabcDeptEOVOImpl vo = getXxabcDeptEOVO1();
        XxabcDeptEOVORowImpl row = null;
        
        row = (XxabcDeptEOVORowImpl)vo.createRow();
        row.setNewRowState(row.STATUS_INITIALIZED);
        
        vo.first();
        vo.insertRow(row);
    }
    
    // Save DeptEOVO
    public void saveDeptEOVO(){
        getOADBTransaction().commit();
        throw new OAException("Data saved successfully", OAException.INFORMATION);
    }
    
    public void initXxabcDeptEOVO(){
        XxabcDeptEOVOImpl vo = getXxabcDeptEOVO1();
        vo.clearCache();
        vo.setWhereClause(null);
        vo.executeQuery();
    }

    public XMLNode getXMLData()
     {
         HrmsEmployeeVOImpl vo = getHrmsEmployeeVO1(); 
         vo.executeQuery();
         XMLNode xmlData = (XMLNode)vo.writeXML(4,XMLInterface.XML_OPT_ALL_ROWS);
         return xmlData;
     }
    
    
    public void initGenerateXMLData(){
        System.out.println("Entered initGenerateXMLData");
        HrmsEmployeeVOImpl vo = getHrmsEmployeeVO1();
        vo.executeQuery();
        
        // write vo data as XMLNode
        XMLNode xmlData = (XMLNode)vo.writeXML(4, XMLInterface.XML_OPT_ALL_ROWS);
        // create a blob variable
        BlobDomain blob = new BlobDomain();
        // Outputstream variable
        OutputStream os = null;

        try {
            // get a blob OutputStream
            os = blob.getBinaryOutputStream();
            // convert the data in OutputStream
            xmlData.print(os);
        } catch (SQLException e) {
            // TODO
        } catch (IOException e) {
            // TODO
        }
        // print the data from OutputStream
        System.out.println(os.toString());
        
        
    }
    
    public void initItemDetailsVO(String orgCode, String itemNumStr){
        ItemDetailsVOImpl vo = getItemDetailsVO1();
        vo.clearCache();
        vo.setWhereClause(null);
        vo.setWhereClauseParam(0, orgCode);
        vo.setWhereClauseParam(1, itemNumStr);
        vo.executeQuery();
    }
    

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) {
        launchTester("abc.oracle.apps.fnd.server", /* package name */
      "TrainingAMLocal" /* Configuration Name */);
    }

    /**Container's getter for ItemDetailsVO1
     */
    public ItemDetailsVOImpl getItemDetailsVO1() {
        return (ItemDetailsVOImpl)findViewObject("ItemDetailsVO1");
    }

    /**Container's getter for InventoryOrgPopVO1
     */
    public InventoryOrgPopVOImpl getInventoryOrgPopVO1() {
        return (InventoryOrgPopVOImpl)findViewObject("InventoryOrgPopVO1");
    }

    /**Container's getter for HrmsEmployeeVO1
     */
    public HrmsEmployeeVOImpl getHrmsEmployeeVO1() {
        return (HrmsEmployeeVOImpl)findViewObject("HrmsEmployeeVO1");
    }

    /**Container's getter for XxabcDeptEOVO1
     */
    public XxabcDeptEOVOImpl getXxabcDeptEOVO1() {
        return (XxabcDeptEOVOImpl)findViewObject("XxabcDeptEOVO1");
    }

    /**Container's getter for XxabcEmpEOVO1
     */
    public XxabcEmpEOVOImpl getXxabcEmpEOVO1() {
        return (XxabcEmpEOVOImpl)findViewObject("XxabcEmpEOVO1");
    }

    /**Container's getter for PositionGraphVO1
     */
    public PositionGraphVOImpl getPositionGraphVO1() {
        return (PositionGraphVOImpl)findViewObject("PositionGraphVO1");
    }

    /**Container's getter for UserEmployeeDetailsVO1
     */
    public UserEmployeeDetailsVOImpl getUserEmployeeDetailsVO1() {
        return (UserEmployeeDetailsVOImpl)findViewObject("UserEmployeeDetailsVO1");
    }

    /**Container's getter for POTypesLookupVO1
     */
    public POTypesLookupVOImpl getPOTypesLookupVO1() {
        return (POTypesLookupVOImpl)findViewObject("POTypesLookupVO1");
    }

    /**Container's getter for ValueSetVO1
     */
    public ValueSetVOImpl getValueSetVO1() {
        return (ValueSetVOImpl)findViewObject("ValueSetVO1");
    }

    /**Container's getter for InvokeGetLEFunVO1
     */
    public InvokeGetLEFunVOImpl getInvokeGetLEFunVO1() {
        return (InvokeGetLEFunVOImpl)findViewObject("InvokeGetLEFunVO1");
    }
}
